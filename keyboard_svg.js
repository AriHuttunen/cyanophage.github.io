
const params = new Proxy(new URLSearchParams(window.location.search), {
  get: (searchParams, prop) => searchParams.get(prop),
});
let url_layout = params.layout; // "some_value"

var swidth = 1000;
var sheight = 180;

var w = 30;
var gap = 10;
var letter = "";
var x = 0;
var y = 0;
var dx;
var fontsize;
var per;
var max = 11.870939;
var red = 0;
var green = 128;

var svg = d3.select("#svglayout").append("svg").attr("xmlns","http://www.w3.org/2000/svg").attr("width", swidth).attr("height", sheight);

var stats = d3.select("#svgstats").append("svg").attr("width", swidth).attr("height", 600)

const word_list_url = 'word_list.json';
const dictionary_url = 'dictionary.json';
let words;

// Fetch the JSON file
function fetchData(){
  fetch(word_list_url)
    .then(response => response.json())
    .then(data => {
      words = data; // Assign data to the global variable
      // console.log(words);
      // console.log("Words loaded from json: " + Object.keys(words).length);
      measureWords();
      generateLayout();
      generatePlots();
    })
    .catch(error => console.error('Error loading JSON file:', error));
}
function fetchDictionary(){
  fetch(dictionary_url)
    .then(response => response.json())
    .then(data => {
      console.log(data);
      dictionary = data["dictionary"]; // Assign data to the global variable
      // console.log("Words loaded from json: " + Object.keys(words).length);
      measureDictionary();
      generateLayout();
      generatePlots();
    })
    .catch(error => console.error('Error loading dictionary JSON file:', error));
}

makeDraggable(svg.node());

// col         0  1  2  3  4  5  6  7  8  9 10 11
var finger = [1, 1, 2, 3, 4, 4, 7, 7, 8, 9, 10, 10]
var hand = [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2]

var rcdata = [
  ["tab", 0, 0, 0],
  ["q", 0, 1, 0.06607202],
  ["w", 0, 2, 2.775025],
  ["e", 0, 3, 11.870939],
  ["r", 0, 4, 4.988437],
  ["t", 0, 5, 9.547406],
  ["y", 0, 6, 1.7949564],
  ["u", 0, 7, 2.7419887],
  ["i", 0, 8, 6.177734],
  ["o", 0, 9, 7.6643543],
  ["p", 0, 10, 1.4425724],
  ["-", 0, 11, 0.2753001],
  ["ctrl", 1, 0, 0],
  ["a", 1, 1, 7.466138],
  ["s", 1, 2, 5.5720735],
  ["d", 1, 3, 4.2616453],
  ["f", 1, 4, 2.0482326],
  ["g", 1, 5, 2.2244246],
  ["h", 1, 6, 6.519106],
  ["j", 1, 7, 0.06607202],
  ["k", 1, 8, 1.0571523],
  ["l", 1, 9, 4.6030173],
  [";", 1, 10, 0.4184561],
  ["'", 1, 11, 0.3523841],
  ["\\", 2, 0, 0],
  ["z", 2, 1, 0.04404801],
  ["x", 2, 2, 0.07708402],
  ["c", 2, 3, 1.8830525],
  ["v", 2, 4, 0.7488162],
  ["b", 2, 5, 1.5526924],
  ["n", 2, 6, 6.1446977],
  ["m", 2, 7, 1.5857284],
  [",", 2, 8, 1.9601365],
  [".", 2, 9, 0.48452812],
  ["/", 2, 10, 0.14315604],
  ["enter", 2, 11, 0],
  ["shift", 3, 4, 0.89197224],
  ["mod", 3, 5, 0],
  ["back", 3, 6, 0],
  ["space", 3, 7, 0],
]

var effort = [
  [
    5, // column 0 tab
    3, // column 1 q
    2, // column 2 w
    1, // column 3 e
    2, // column 4 r
    7, // column 5 t
    7, // column 6 y
    2, // column 7 u
    1, // column 8 i
    2, // column 9 o
    3, // column 10 p
    5, // column 11 [
  ],
  [
    5, // column 0 ctrl
    1, // column 1 a
    0, // column 2 s
    0, // column 3 d
    0, // column 4
    5, // column 5
    5, // column 6
    0, // column 7
    0, // column 8
    0, // column 9
    1, // column 10
    5, // column 11
  ],
  [
    7, // column 0
    3, // column 1
    2, // column 2
    2, // column 3
    1, // column 4
    8, // column 5
    8, // column 6
    1, // column 7
    2, // column 8
    2, // column 9
    3, // column 10
    7, // column 11
  ],
];


// var bigram_effort = {
//   2 : {          // col1
//     1 : {        // row1
//       3 : {      // col2
//         0 : 1.0, // row2
//       }
//     }
//   }
// };

//    0  1  2  3  4  5  6  7  8  9 10 11
// 0     q  w  e  r  t  y  u  i  o  p  -
// 1     a  s  d  f  g  h  j  k  l  ;  '
// 2  \  z  x  c  v  b  n  m  ,  .  /

var bigram_effort = {
  0 : {
    0 : {
      0 : {
        0 : 3.3,
        1 : 13.871,
        2 : 14.871,
      },
      1 : {
        0 : 8.2,
        1 : 10.486,
        2 : 14.012,
      },
      2 : {
        0 : 3.2,
        1 : 4.959,
        2 : 6.486,
      },
      3 : {
        0 : 3.2,
        1 : 4.727,
        2 : 6.163,
      },
      4 : {
        0 : 3.2,
        1 : 4.601,
        2 : 5.959,
      },
      5 : {
        0 : 3.2,
        1 : 4.523,
        2 : 5.823,
      },
      6 : {
        0 : 3.3,
        1 : 3.3,
        2 : 3.3,
        3 : 3.3,
      },
      7 : {
        0 : 3.3,
        1 : 3.3,
        2 : 3.3,
      },
      8 : {
        0 : 3.3,
        1 : 3.3,
        2 : 3.3,
      },
      9 : {
        0 : 3.3,
        1 : 3.3,
        2 : 3.3,
      },
      10 : {
        0 : 3.3,
        1 : 3.3,
        2 : 3.3,
      },
      11 : {
        0 : 3.3,
        1 : 3.3,
        2 : 3.3,
      },
    },
    1 : {
      0 : {
        0 : 13.571,
        1 : 2.5,
        2 : 13.571,
      },
      1 : {
        0 : 10.186,
        1 : 7.4,
        2 : 10.186,
      },
      2 : {
        0 : 4.659,
        1 : 2.4,
        2 : 4.659,
      },
      3 : {
        0 : 4.427,
        1 : 2.4,
        2 : 4.427,
      },
      4 : {
        0 : 4.301,
        1 : 2.4,
        2 : 4.301,
      },
      5 : {
        0 : 4.223,
        1 : 2.4,
        2 : 4.223,
      },
      6 : {
        0 : 2.5,
        1 : 2.5,
        2 : 2.5,
        3 : 2.5,
      },
      7 : {
        0 : 2.5,
        1 : 2.5,
        2 : 2.5,
      },
      8 : {
        0 : 2.5,
        1 : 2.5,
        2 : 2.5,
      },
      9 : {
        0 : 2.5,
        1 : 2.5,
        2 : 2.5,
      },
      10 : {
        0 : 2.5,
        1 : 2.5,
        2 : 2.5,
      },
      11 : {
        0 : 2.5,
        1 : 2.5,
        2 : 2.5,
      },
    },
    2 : {
      0 : {
        0 : 15.571,
        1 : 14.671,
        2 : 3.5,
      },
      1 : {
        0 : 14.712,
        1 : 11.286,
        2 : 8.4,
      },
      2 : {
        0 : 7.186,
        1 : 5.759,
        2 : 3.4,
      },
      3 : {
        0 : 6.863,
        1 : 5.527,
        2 : 3.4,
      },
      4 : {
        0 : 6.659,
        1 : 5.401,
        2 : 3.4,
      },
      5 : {
        0 : 6.523,
        1 : 5.323,
        2 : 3.4,
      },
      6 : {
        0 : 3.5,
        1 : 3.5,
        2 : 3.5,
        3 : 3.5,
      },
      7 : {
        0 : 3.5,
        1 : 3.5,
        2 : 3.5,
      },
      8 : {
        0 : 3.5,
        1 : 3.5,
        2 : 3.5,
      },
      9 : {
        0 : 3.5,
        1 : 3.5,
        2 : 3.5,
      },
      10 : {
        0 : 3.5,
        1 : 3.5,
        2 : 3.5,
      },
      11 : {
        0 : 3.5,
        1 : 3.5,
        2 : 3.5,
      },
    },
  },
  1 : {
    0 : {
      0 : {
        0 : 6.9,
        1 : 9.186,
        2 : 12.712,
      },
      1 : {
        0 : 1.8,
        1 : 12.371,
        2 : 13.371,
      },
      2 : {
        0 : 1.7,
        1 : 6.986,
        2 : 10.512,
      },
      3 : {
        0 : 1.7,
        1 : 3.459,
        2 : 4.986,
      },
      4 : {
        0 : 1.7,
        1 : 3.227,
        2 : 4.663,
      },
      5 : {
        0 : 1.7,
        1 : 3.101,
        2 : 4.459,
      },
      6 : {
        0 : 1.8,
        1 : 1.8,
        2 : 1.8,
        3 : 1.8,
      },
      7 : {
        0 : 1.8,
        1 : 1.8,
        2 : 1.8,
      },
      8 : {
        0 : 1.8,
        1 : 1.8,
        2 : 1.8,
      },
      9 : {
        0 : 1.8,
        1 : 1.8,
        2 : 1.8,
      },
      10 : {
        0 : 1.8,
        1 : 1.8,
        2 : 1.8,
      },
      11 : {
        0 : 1.8,
        1 : 1.8,
        2 : 1.8,
      },
    },
    1 : {
      0 : {
        0 : 8.886,
        1 : 6.1,
        2 : 8.886,
      },
      1 : {
        0 : 12.071,
        1 : 1.0,
        2 : 12.071,
      },
      2 : {
        0 : 3.686,
        1 : 0.9,
        2 : 6.686,
      },
      3 : {
        0 : 3.159,
        1 : 0.9,
        2 : 3.159,
      },
      4 : {
        0 : 2.927,
        1 : 0.9,
        2 : 2.927,
      },
      5 : {
        0 : 2.801,
        1 : 0.9,
        2 : 2.801,
      },
      6 : {
        0 : 1.0,
        1 : 1.0,
        2 : 1.0,
        3 : 1.0,
      },
      7 : {
        0 : 1.0,
        1 : 1.0,
        2 : 1.0,
      },
      8 : {
        0 : 1.0,
        1 : 1.0,
        2 : 1.0,
      },
      9 : {
        0 : 1.0,
        1 : 1.0,
        2 : 1.0,
      },
      10 : {
        0 : 1.0,
        1 : 1.0,
        2 : 1.0,
      },
      11 : {
        0 : 1.0,
        1 : 1.0,
        2 : 1.0,
      },
    },
    2 : {
      0 : {
        0 : 13.412,
        1 : 9.986,
        2 : 7.1,
      },
      1 : {
        0 : 14.071,
        1 : 13.171,
        2 : 2.0,
      },
      2 : {
        0 : 11.212,
        1 : 7.786,
        2 : 1.9,
      },
      3 : {
        0 : 5.686,
        1 : 4.259,
        2 : 1.9,
      },
      4 : {
        0 : 5.363,
        1 : 4.027,
        2 : 1.9,
      },
      5 : {
        0 : 5.159,
        1 : 3.901,
        2 : 1.9,
      },
      6 : {
        0 : 2.0,
        1 : 2.0,
        2 : 2.0,
        3 : 2.0,
      },
      7 : {
        0 : 2.0,
        1 : 2.0,
        2 : 2.0,
      },
      8 : {
        0 : 2.0,
        1 : 2.0,
        2 : 2.0,
      },
      9 : {
        0 : 2.0,
        1 : 2.0,
        2 : 2.0,
      },
      10 : {
        0 : 2.0,
        1 : 2.0,
        2 : 2.0,
      },
      11 : {
        0 : 2.0,
        1 : 2.0,
        2 : 2.0,
      },
    },
  },
  2 : {
    0 : {
      0 : {
        0 : 1.5,
        1 : 3.259,
        2 : 4.786,
      },
      1 : {
        0 : 1.5,
        1 : 6.786,
        2 : 10.312,
      },
      2 : {
        0 : 1.4,
        1 : 6.971,
        2 : 7.971,
      },
      3 : {
        0 : 1.3,
        1 : 3.586,
        2 : 7.112,
      },
      4 : {
        0 : 1.3,
        1 : 3.059,
        2 : 4.586,
      },
      5 : {
        0 : 1.3,
        1 : 2.827,
        2 : 4.263,
      },
      6 : {
        0 : 1.4,
        1 : 1.4,
        2 : 1.4,
        3 : 1.4,
      },
      7 : {
        0 : 1.4,
        1 : 1.4,
        2 : 1.4,
      },
      8 : {
        0 : 1.4,
        1 : 1.4,
        2 : 1.4,
      },
      9 : {
        0 : 1.4,
        1 : 1.4,
        2 : 1.4,
      },
      10 : {
        0 : 1.4,
        1 : 1.4,
        2 : 1.4,
      },
      11 : {
        0 : 1.4,
        1 : 1.4,
        2 : 1.4,
      },
    },
    1 : {
      0 : {
        0 : 2.959,
        1 : 0.7,
        2 : 2.959,
      },
      1 : {
        0 : 3.486,
        1 : 0.7,
        2 : 3.486,
      },
      2 : {
        0 : 6.671,
        1 : 0.6,
        2 : 6.671,
      },
      3 : {
        0 : 3.286,
        1 : 0.5,
        2 : 3.286,
      },
      4 : {
        0 : 2.759,
        1 : 0.5,
        2 : 2.759,
      },
      5 : {
        0 : 2.527,
        1 : 0.5,
        2 : 2.527,
      },
      6 : {
        0 : 0.6,
        1 : 0.6,
        2 : 0.6,
        3 : 0.6,
      },
      7 : {
        0 : 0.6,
        1 : 0.6,
        2 : 0.6,
      },
      8 : {
        0 : 0.6,
        1 : 0.6,
        2 : 0.6,
      },
      9 : {
        0 : 0.6,
        1 : 0.6,
        2 : 0.6,
      },
      10 : {
        0 : 0.6,
        1 : 0.6,
        2 : 0.6,
      },
      11 : {
        0 : 0.6,
        1 : 0.6,
        2 : 0.6,
      },
    },
    2 : {
      0 : {
        0 : 5.486,
        1 : 4.059,
        2 : 1.7,
      },
      1 : {
        0 : 11.012,
        1 : 7.586,
        2 : 1.7,
      },
      2 : {
        0 : 8.671,
        1 : 7.771,
        2 : 1.6,
      },
      3 : {
        0 : 7.812,
        1 : 4.386,
        2 : 1.5,
      },
      4 : {
        0 : 5.286,
        1 : 3.859,
        2 : 1.5,
      },
      5 : {
        0 : 4.963,
        1 : 3.627,
        2 : 1.5,
      },
      6 : {
        0 : 1.6,
        1 : 1.6,
        2 : 1.6,
        3 : 1.6,
      },
      7 : {
        0 : 1.6,
        1 : 1.6,
        2 : 1.6,
      },
      8 : {
        0 : 1.6,
        1 : 1.6,
        2 : 1.6,
      },
      9 : {
        0 : 1.6,
        1 : 1.6,
        2 : 1.6,
      },
      10 : {
        0 : 1.6,
        1 : 1.6,
        2 : 1.6,
      },
      11 : {
        0 : 1.6,
        1 : 1.6,
        2 : 1.6,
      },
    },
  },
  3 : {
    0 : {
      0 : {
        0 : 1.2,
        1 : 2.727,
        2 : 4.163,
      },
      1 : {
        0 : 1.2,
        1 : 2.959,
        2 : 4.486,
      },
      2 : {
        0 : 1.2,
        1 : 3.486,
        2 : 7.012,
      },
      3 : {
        0 : 1.1,
        1 : 6.671,
        2 : 7.671,
      },
      4 : {
        0 : 1.0,
        1 : 3.286,
        2 : 6.812,
      },
      5 : {
        0 : 3.0,
        1 : 5.759,
        2 : 8.286,
      },
      6 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
        3 : 1.1,
      },
      7 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      8 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      9 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      10 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      11 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
    },
    1 : {
      0 : {
        0 : 2.427,
        1 : 0.4,
        2 : 2.427,
      },
      1 : {
        0 : 2.659,
        1 : 0.4,
        2 : 2.659,
      },
      2 : {
        0 : 3.186,
        1 : 0.4,
        2 : 3.186,
      },
      3 : {
        0 : 6.371,
        1 : 0.3,
        2 : 6.371,
      },
      4 : {
        0 : 2.986,
        1 : 0.2,
        2 : 2.986,
      },
      5 : {
        0 : 5.459,
        1 : 2.2,
        2 : 3.459,
      },
      6 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
        3 : 0.3,
      },
      7 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      8 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      9 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      10 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      11 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
    },
    2 : {
      0 : {
        0 : 4.863,
        1 : 3.527,
        2 : 1.4,
      },
      1 : {
        0 : 5.186,
        1 : 3.759,
        2 : 1.4,
      },
      2 : {
        0 : 7.712,
        1 : 4.286,
        2 : 1.4,
      },
      3 : {
        0 : 8.371,
        1 : 7.471,
        2 : 1.3,
      },
      4 : {
        0 : 7.512,
        1 : 4.086,
        2 : 1.2,
      },
      5 : {
        0 : 8.986,
        1 : 6.559,
        2 : 3.2,
      },
      6 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
        3 : 1.3,
      },
      7 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      8 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      9 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      10 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      11 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
    },
  },
  4 : {
    0 : {
      0 : {
        0 : 1.2,
        1 : 2.601,
        2 : 3.959,
      },
      1 : {
        0 : 1.2,
        1 : 2.727,
        2 : 4.163,
      },
      2 : {
        0 : 1.2,
        1 : 2.959,
        2 : 4.486,
      },
      3 : {
        0 : 1.2,
        1 : 3.486,
        2 : 7.012,
      },
      4 : {
        0 : 1.1,
        1 : 6.671,
        2 : 7.671,
      },
      5 : {
        0 : 4.0,
        1 : 6.286,
        2 : 9.812,
      },
      6 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
        3 : 1.1,
      },
      7 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      8 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      9 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      10 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      11 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
    },
    1 : {
      0 : {
        0 : 2.301,
        1 : 0.4,
        2 : 2.301,
      },
      1 : {
        0 : 2.427,
        1 : 0.4,
        2 : 2.427,
      },
      2 : {
        0 : 2.659,
        1 : 0.4,
        2 : 2.659,
      },
      3 : {
        0 : 3.186,
        1 : 0.4,
        2 : 3.186,
      },
      4 : {
        0 : 6.371,
        1 : 0.3,
        2 : 6.371,
      },
      5 : {
        0 : 5.986,
        1 : 3.2,
        2 : 5.986,
      },
      6 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
        3 : 0.3,
      },
      7 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      8 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      9 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      10 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      11 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
    },
    2 : {
      0 : {
        0 : 4.659,
        1 : 3.401,
        2 : 1.4,
      },
      1 : {
        0 : 4.863,
        1 : 3.527,
        2 : 1.4,
      },
      2 : {
        0 : 5.186,
        1 : 3.759,
        2 : 1.4,
      },
      3 : {
        0 : 7.712,
        1 : 4.286,
        2 : 1.4,
      },
      4 : {
        0 : 8.371,
        1 : 7.471,
        2 : 1.3,
      },
      5 : {
        0 : 10.512,
        1 : 7.086,
        2 : 4.2,
      },
      6 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
        3 : 1.3,
      },
      7 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      8 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      9 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      10 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      11 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
    },
  },
  5 : {
    0 : {
      0 : {
        0 : 4.9,
        1 : 6.223,
        2 : 7.523,
      },
      1 : {
        0 : 4.9,
        1 : 6.301,
        2 : 7.659,
      },
      2 : {
        0 : 4.9,
        1 : 6.427,
        2 : 7.863,
      },
      3 : {
        0 : 4.9,
        1 : 6.659,
        2 : 8.186,
      },
      4 : {
        0 : 7.9,
        1 : 10.186,
        2 : 13.712,
      },
      5 : {
        0 : 3.8,
        1 : 10.371,
        2 : 11.371,
      },
      6 : {
        0 : 3.8,
        1 : 3.8,
        2 : 3.8,
        3 : 3.8,
      },
      7 : {
        0 : 3.8,
        1 : 3.8,
        2 : 3.8,
      },
      8 : {
        0 : 3.8,
        1 : 3.8,
        2 : 3.8,
      },
      9 : {
        0 : 3.8,
        1 : 3.8,
        2 : 3.8,
      },
      10 : {
        0 : 3.8,
        1 : 3.8,
        2 : 3.8,
      },
      11 : {
        0 : 3.8,
        1 : 3.8,
        2 : 3.8,
      },
    },
    1 : {
      0 : {
        0 : 5.923,
        1 : 4.1,
        2 : 5.923,
      },
      1 : {
        0 : 6.001,
        1 : 4.1,
        2 : 6.001,
      },
      2 : {
        0 : 6.127,
        1 : 4.1,
        2 : 6.127,
      },
      3 : {
        0 : 6.359,
        1 : 4.1,
        2 : 6.359,
      },
      4 : {
        0 : 9.886,
        1 : 7.1,
        2 : 9.886,
      },
      5 : {
        0 : 10.071,
        1 : 3.0,
        2 : 10.071,
      },
      6 : {
        0 : 3.0,
        1 : 3.0,
        2 : 3.0,
        3 : 3.0,
      },
      7 : {
        0 : 3.0,
        1 : 3.0,
        2 : 3.0,
      },
      8 : {
        0 : 3.0,
        1 : 3.0,
        2 : 3.0,
      },
      9 : {
        0 : 3.0,
        1 : 3.0,
        2 : 3.0,
      },
      10 : {
        0 : 3.0,
        1 : 3.0,
        2 : 3.0,
      },
      11 : {
        0 : 3.0,
        1 : 3.0,
        2 : 3.0,
      },
    },
    2 : {
      0 : {
        0 : 8.223,
        1 : 7.023,
        2 : 5.1,
      },
      1 : {
        0 : 8.359,
        1 : 7.101,
        2 : 5.1,
      },
      2 : {
        0 : 8.563,
        1 : 7.227,
        2 : 5.1,
      },
      3 : {
        0 : 8.886,
        1 : 7.459,
        2 : 5.1,
      },
      4 : {
        0 : 14.412,
        1 : 10.986,
        2 : 8.1,
      },
      5 : {
        0 : 12.071,
        1 : 11.171,
        2 : 4.0,
      },
      6 : {
        0 : 4.0,
        1 : 4.0,
        2 : 4.0,
        3 : 4.0,
      },
      7 : {
        0 : 4.0,
        1 : 4.0,
        2 : 4.0,
      },
      8 : {
        0 : 4.0,
        1 : 4.0,
        2 : 4.0,
      },
      9 : {
        0 : 4.0,
        1 : 4.0,
        2 : 4.0,
      },
      10 : {
        0 : 4.0,
        1 : 4.0,
        2 : 4.0,
      },
      11 : {
        0 : 4.0,
        1 : 4.0,
        2 : 4.0,
      },
    },
  },
  6 : {
    0 : {
      0 : {
        0 : 3.8,
        1 : 3.8,
        2 : 3.8,
      },
      1 : {
        0 : 3.8,
        1 : 3.8,
        2 : 3.8,
      },
      2 : {
        0 : 3.8,
        1 : 3.8,
        2 : 3.8,
      },
      3 : {
        0 : 3.8,
        1 : 3.8,
        2 : 3.8,
      },
      4 : {
        0 : 3.8,
        1 : 3.8,
        2 : 3.8,
      },
      5 : {
        0 : 3.8,
        1 : 3.8,
        2 : 3.8,
      },
      6 : {
        0 : 3.8,
        1 : 10.371,
        2 : 11.371,
        3 : 3.8,
      },
      7 : {
        0 : 7.9,
        1 : 10.186,
        2 : 13.712,
      },
      8 : {
        0 : 4.9,
        1 : 6.659,
        2 : 8.186,
      },
      9 : {
        0 : 4.9,
        1 : 6.427,
        2 : 7.863,
      },
      10 : {
        0 : 4.9,
        1 : 6.301,
        2 : 7.659,
      },
      11 : {
        0 : 4.9,
        1 : 6.223,
        2 : 7.523,
      },
    },
    1 : {
      0 : {
        0 : 3.0,
        1 : 3.0,
        2 : 3.0,
      },
      1 : {
        0 : 3.0,
        1 : 3.0,
        2 : 3.0,
      },
      2 : {
        0 : 3.0,
        1 : 3.0,
        2 : 3.0,
      },
      3 : {
        0 : 3.0,
        1 : 3.0,
        2 : 3.0,
      },
      4 : {
        0 : 3.0,
        1 : 3.0,
        2 : 3.0,
      },
      5 : {
        0 : 3.0,
        1 : 3.0,
        2 : 3.0,
      },
      6 : {
        0 : 10.071,
        1 : 3.0,
        2 : 10.071,
        3 : 3.0,
      },
      7 : {
        0 : 9.886,
        1 : 7.1,
        2 : 9.886,
      },
      8 : {
        0 : 6.359,
        1 : 4.1,
        2 : 6.359,
      },
      9 : {
        0 : 6.127,
        1 : 4.1,
        2 : 6.127,
      },
      10 : {
        0 : 6.001,
        1 : 4.1,
        2 : 6.001,
      },
      11 : {
        0 : 5.923,
        1 : 4.1,
        2 : 5.923,
      },
    },
    2 : {
      0 : {
        0 : 4.0,
        1 : 4.0,
        2 : 4.0,
      },
      1 : {
        0 : 4.0,
        1 : 4.0,
        2 : 4.0,
      },
      2 : {
        0 : 4.0,
        1 : 4.0,
        2 : 4.0,
      },
      3 : {
        0 : 4.0,
        1 : 4.0,
        2 : 4.0,
      },
      4 : {
        0 : 4.0,
        1 : 4.0,
        2 : 4.0,
      },
      5 : {
        0 : 4.0,
        1 : 4.0,
        2 : 4.0,
      },
      6 : {
        0 : 12.071,
        1 : 11.171,
        2 : 4.0,
        3 : 4.0,
      },
      7 : {
        0 : 14.412,
        1 : 10.986,
        2 : 8.1,
      },
      8 : {
        0 : 8.886,
        1 : 7.459,
        2 : 5.1,
      },
      9 : {
        0 : 8.563,
        1 : 7.227,
        2 : 5.1,
      },
      10 : {
        0 : 8.359,
        1 : 7.101,
        2 : 5.1,
      },
      11 : {
        0 : 8.223,
        1 : 7.023,
        2 : 5.1,
      },
    },
  },
  7 : {
    0 : {
      0 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      1 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      2 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      3 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      4 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      5 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      6 : {
        0 : 4.0,
        1 : 6.286,
        2 : 9.812,
        3 : 1.1,
      },
      7 : {
        0 : 1.1,
        1 : 6.671,
        2 : 7.671,
      },
      8 : {
        0 : 1.2,
        1 : 3.486,
        2 : 7.012,
      },
      9 : {
        0 : 1.2,
        1 : 2.959,
        2 : 4.486,
      },
      10 : {
        0 : 1.2,
        1 : 2.727,
        2 : 4.163,
      },
      11 : {
        0 : 1.2,
        1 : 2.601,
        2 : 3.959,
      },
    },
    1 : {
      0 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      1 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      2 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      3 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      4 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      5 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      6 : {
        0 : 5.986,
        1 : 3.2,
        2 : 5.986,
        3 : 0.3,
      },
      7 : {
        0 : 6.371,
        1 : 0.3,
        2 : 6.371,
      },
      8 : {
        0 : 3.186,
        1 : 0.4,
        2 : 3.186,
      },
      9 : {
        0 : 2.659,
        1 : 0.4,
        2 : 2.659,
      },
      10 : {
        0 : 2.427,
        1 : 0.4,
        2 : 2.427,
      },
      11 : {
        0 : 2.301,
        1 : 0.4,
        2 : 2.301,
      },
    },
    2 : {
      0 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      1 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      2 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      3 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      4 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      5 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      6 : {
        0 : 10.512,
        1 : 7.086,
        2 : 4.2,
        3 : 1.3,
      },
      7 : {
        0 : 8.371,
        1 : 7.471,
        2 : 1.3,
      },
      8 : {
        0 : 7.712,
        1 : 4.286,
        2 : 1.4,
      },
      9 : {
        0 : 5.186,
        1 : 3.759,
        2 : 1.4,
      },
      10 : {
        0 : 4.863,
        1 : 3.527,
        2 : 1.4,
      },
      11 : {
        0 : 4.659,
        1 : 3.401,
        2 : 1.4,
      },
    },
  },
  8 : {
    0 : {
      0 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      1 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      2 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      3 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      4 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      5 : {
        0 : 1.1,
        1 : 1.1,
        2 : 1.1,
      },
      6 : {
        0 : 3.0,
        1 : 5.759,
        2 : 8.286,
        3 : 1.1,
      },
      7 : {
        0 : 1.0,
        1 : 3.286,
        2 : 6.812,
      },
      8 : {
        0 : 1.1,
        1 : 6.671,
        2 : 7.671,
      },
      9 : {
        0 : 1.2,
        1 : 3.486,
        2 : 7.012,
      },
      10 : {
        0 : 1.2,
        1 : 2.959,
        2 : 4.486,
      },
      11 : {
        0 : 1.2,
        1 : 2.727,
        2 : 4.163,
      },
    },
    1 : {
      0 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      1 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      2 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      3 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      4 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      5 : {
        0 : 0.3,
        1 : 0.3,
        2 : 0.3,
      },
      6 : {
        0 : 5.459,
        1 : 2.2,
        2 : 3.459,
        3 : 0.3,
      },
      7 : {
        0 : 2.986,
        1 : 0.2,
        2 : 2.986,
      },
      8 : {
        0 : 6.371,
        1 : 0.3,
        2 : 6.371,
      },
      9 : {
        0 : 3.186,
        1 : 0.4,
        2 : 3.186,
      },
      10 : {
        0 : 2.659,
        1 : 0.4,
        2 : 2.659,
      },
      11 : {
        0 : 2.427,
        1 : 0.4,
        2 : 2.427,
      },
    },
    2 : {
      0 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      1 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      2 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      3 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      4 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      5 : {
        0 : 1.3,
        1 : 1.3,
        2 : 1.3,
      },
      6 : {
        0 : 8.986,
        1 : 6.559,
        2 : 3.2,
        3 : 1.3,
      },
      7 : {
        0 : 7.512,
        1 : 4.086,
        2 : 1.2,
      },
      8 : {
        0 : 8.371,
        1 : 7.471,
        2 : 1.3,
      },
      9 : {
        0 : 7.712,
        1 : 4.286,
        2 : 1.4,
      },
      10 : {
        0 : 5.186,
        1 : 3.759,
        2 : 1.4,
      },
      11 : {
        0 : 4.863,
        1 : 3.527,
        2 : 1.4,
      },
    },
  },
  9 : {
    0 : {
      0 : {
        0 : 1.4,
        1 : 1.4,
        2 : 1.4,
      },
      1 : {
        0 : 1.4,
        1 : 1.4,
        2 : 1.4,
      },
      2 : {
        0 : 1.4,
        1 : 1.4,
        2 : 1.4,
      },
      3 : {
        0 : 1.4,
        1 : 1.4,
        2 : 1.4,
      },
      4 : {
        0 : 1.4,
        1 : 1.4,
        2 : 1.4,
      },
      5 : {
        0 : 1.4,
        1 : 1.4,
        2 : 1.4,
      },
      6 : {
        0 : 1.3,
        1 : 2.827,
        2 : 4.263,
        3 : 1.4,
      },
      7 : {
        0 : 1.3,
        1 : 3.059,
        2 : 4.586,
      },
      8 : {
        0 : 1.3,
        1 : 3.586,
        2 : 7.112,
      },
      9 : {
        0 : 1.4,
        1 : 6.971,
        2 : 7.971,
      },
      10 : {
        0 : 1.5,
        1 : 6.786,
        2 : 10.312,
      },
      11 : {
        0 : 1.5,
        1 : 3.259,
        2 : 4.786,
      },
    },
    1 : {
      0 : {
        0 : 0.6,
        1 : 0.6,
        2 : 0.6,
      },
      1 : {
        0 : 0.6,
        1 : 0.6,
        2 : 0.6,
      },
      2 : {
        0 : 0.6,
        1 : 0.6,
        2 : 0.6,
      },
      3 : {
        0 : 0.6,
        1 : 0.6,
        2 : 0.6,
      },
      4 : {
        0 : 0.6,
        1 : 0.6,
        2 : 0.6,
      },
      5 : {
        0 : 0.6,
        1 : 0.6,
        2 : 0.6,
      },
      6 : {
        0 : 2.527,
        1 : 0.5,
        2 : 2.527,
        3 : 0.6,
      },
      7 : {
        0 : 2.759,
        1 : 0.5,
        2 : 2.759,
      },
      8 : {
        0 : 3.286,
        1 : 0.5,
        2 : 3.286,
      },
      9 : {
        0 : 6.671,
        1 : 0.6,
        2 : 6.671,
      },
      10 : {
        0 : 3.486,
        1 : 0.7,
        2 : 3.486,
      },
      11 : {
        0 : 2.959,
        1 : 0.7,
        2 : 2.959,
      },
    },
    2 : {
      0 : {
        0 : 1.6,
        1 : 1.6,
        2 : 1.6,
      },
      1 : {
        0 : 1.6,
        1 : 1.6,
        2 : 1.6,
      },
      2 : {
        0 : 1.6,
        1 : 1.6,
        2 : 1.6,
      },
      3 : {
        0 : 1.6,
        1 : 1.6,
        2 : 1.6,
      },
      4 : {
        0 : 1.6,
        1 : 1.6,
        2 : 1.6,
      },
      5 : {
        0 : 1.6,
        1 : 1.6,
        2 : 1.6,
      },
      6 : {
        0 : 4.963,
        1 : 3.627,
        2 : 1.5,
        3 : 1.6,
      },
      7 : {
        0 : 5.286,
        1 : 3.859,
        2 : 1.5,
      },
      8 : {
        0 : 7.812,
        1 : 4.386,
        2 : 1.5,
      },
      9 : {
        0 : 8.671,
        1 : 7.771,
        2 : 1.6,
      },
      10 : {
        0 : 11.012,
        1 : 7.586,
        2 : 1.7,
      },
      11 : {
        0 : 5.486,
        1 : 4.059,
        2 : 1.7,
      },
    },
  },
  10 : {
    0 : {
      0 : {
        0 : 1.8,
        1 : 1.8,
        2 : 1.8,
      },
      1 : {
        0 : 1.8,
        1 : 1.8,
        2 : 1.8,
      },
      2 : {
        0 : 1.8,
        1 : 1.8,
        2 : 1.8,
      },
      3 : {
        0 : 1.8,
        1 : 1.8,
        2 : 1.8,
      },
      4 : {
        0 : 1.8,
        1 : 1.8,
        2 : 1.8,
      },
      5 : {
        0 : 1.8,
        1 : 1.8,
        2 : 1.8,
      },
      6 : {
        0 : 1.7,
        1 : 3.101,
        2 : 4.459,
        3 : 1.8,
      },
      7 : {
        0 : 1.7,
        1 : 3.227,
        2 : 4.663,
      },
      8 : {
        0 : 1.7,
        1 : 3.459,
        2 : 4.986,
      },
      9 : {
        0 : 1.7,
        1 : 6.986,
        2 : 10.512,
      },
      10 : {
        0 : 1.8,
        1 : 12.371,
        2 : 13.371,
      },
      11 : {
        0 : 6.9,
        1 : 9.186,
        2 : 12.712,
      },
    },
    1 : {
      0 : {
        0 : 1.0,
        1 : 1.0,
        2 : 1.0,
      },
      1 : {
        0 : 1.0,
        1 : 1.0,
        2 : 1.0,
      },
      2 : {
        0 : 1.0,
        1 : 1.0,
        2 : 1.0,
      },
      3 : {
        0 : 1.0,
        1 : 1.0,
        2 : 1.0,
      },
      4 : {
        0 : 1.0,
        1 : 1.0,
        2 : 1.0,
      },
      5 : {
        0 : 1.0,
        1 : 1.0,
        2 : 1.0,
      },
      6 : {
        0 : 2.801,
        1 : 0.9,
        2 : 2.801,
        3 : 1.0,
      },
      7 : {
        0 : 2.927,
        1 : 0.9,
        2 : 2.927,
      },
      8 : {
        0 : 3.159,
        1 : 0.9,
        2 : 3.159,
      },
      9 : {
        0 : 3.686,
        1 : 0.9,
        2 : 6.686,
      },
      10 : {
        0 : 12.071,
        1 : 1.0,
        2 : 12.071,
      },
      11 : {
        0 : 8.886,
        1 : 6.1,
        2 : 8.886,
      },
    },
    2 : {
      0 : {
        0 : 2.0,
        1 : 2.0,
        2 : 2.0,
      },
      1 : {
        0 : 2.0,
        1 : 2.0,
        2 : 2.0,
      },
      2 : {
        0 : 2.0,
        1 : 2.0,
        2 : 2.0,
      },
      3 : {
        0 : 2.0,
        1 : 2.0,
        2 : 2.0,
      },
      4 : {
        0 : 2.0,
        1 : 2.0,
        2 : 2.0,
      },
      5 : {
        0 : 2.0,
        1 : 2.0,
        2 : 2.0,
      },
      6 : {
        0 : 5.159,
        1 : 3.901,
        2 : 1.9,
        3 : 2.0,
      },
      7 : {
        0 : 5.363,
        1 : 4.027,
        2 : 1.9,
      },
      8 : {
        0 : 5.686,
        1 : 4.259,
        2 : 1.9,
      },
      9 : {
        0 : 11.212,
        1 : 7.786,
        2 : 1.9,
      },
      10 : {
        0 : 14.071,
        1 : 13.171,
        2 : 2.0,
      },
      11 : {
        0 : 13.412,
        1 : 9.986,
        2 : 7.1,
      },
    },
  },
  11 : {
    0 : {
      0 : {
        0 : 3.3,
        1 : 3.3,
        2 : 3.3,
      },
      1 : {
        0 : 3.3,
        1 : 3.3,
        2 : 3.3,
      },
      2 : {
        0 : 3.3,
        1 : 3.3,
        2 : 3.3,
      },
      3 : {
        0 : 3.3,
        1 : 3.3,
        2 : 3.3,
      },
      4 : {
        0 : 3.3,
        1 : 3.3,
        2 : 3.3,
      },
      5 : {
        0 : 3.3,
        1 : 3.3,
        2 : 3.3,
      },
      6 : {
        0 : 3.2,
        1 : 4.523,
        2 : 5.823,
        3 : 3.3,
      },
      7 : {
        0 : 3.2,
        1 : 4.601,
        2 : 5.959,
      },
      8 : {
        0 : 3.2,
        1 : 4.727,
        2 : 6.163,
      },
      9 : {
        0 : 3.2,
        1 : 4.959,
        2 : 6.486,
      },
      10 : {
        0 : 8.2,
        1 : 10.486,
        2 : 14.012,
      },
      11 : {
        0 : 3.3,
        1 : 13.871,
        2 : 14.871,
      },
    },
    1 : {
      0 : {
        0 : 2.5,
        1 : 2.5,
        2 : 2.5,
      },
      1 : {
        0 : 2.5,
        1 : 2.5,
        2 : 2.5,
      },
      2 : {
        0 : 2.5,
        1 : 2.5,
        2 : 2.5,
      },
      3 : {
        0 : 2.5,
        1 : 2.5,
        2 : 2.5,
      },
      4 : {
        0 : 2.5,
        1 : 2.5,
        2 : 2.5,
      },
      5 : {
        0 : 2.5,
        1 : 2.5,
        2 : 2.5,
      },
      6 : {
        0 : 4.223,
        1 : 2.4,
        2 : 4.223,
        3 : 2.5,
      },
      7 : {
        0 : 4.301,
        1 : 2.4,
        2 : 4.301,
      },
      8 : {
        0 : 4.427,
        1 : 2.4,
        2 : 4.427,
      },
      9 : {
        0 : 4.659,
        1 : 2.4,
        2 : 4.659,
      },
      10 : {
        0 : 10.186,
        1 : 7.4,
        2 : 10.186,
      },
      11 : {
        0 : 13.571,
        1 : 2.5,
        2 : 13.571,
      },
    },
    2 : {
      0 : {
        0 : 3.5,
        1 : 3.5,
        2 : 3.5,
      },
      1 : {
        0 : 3.5,
        1 : 3.5,
        2 : 3.5,
      },
      2 : {
        0 : 3.5,
        1 : 3.5,
        2 : 3.5,
      },
      3 : {
        0 : 3.5,
        1 : 3.5,
        2 : 3.5,
      },
      4 : {
        0 : 3.5,
        1 : 3.5,
        2 : 3.5,
      },
      5 : {
        0 : 3.5,
        1 : 3.5,
        2 : 3.5,
      },
      6 : {
        0 : 6.523,
        1 : 5.323,
        2 : 3.4,
        3 : 3.5,
      },
      7 : {
        0 : 6.659,
        1 : 5.401,
        2 : 3.4,
      },
      8 : {
        0 : 6.863,
        1 : 5.527,
        2 : 3.4,
      },
      9 : {
        0 : 7.186,
        1 : 5.759,
        2 : 3.4,
      },
      10 : {
        0 : 14.712,
        1 : 11.286,
        2 : 8.4,
      },
      11 : {
        0 : 15.571,
        1 : 14.671,
        2 : 3.5,
      },
    },
  },
}

function openPopup() {
  for (var row = 0; row < 3; row++){
    for (var col = 0; col < 12; col++){
      var name = "textInput-" + row + "-" + col
      document.getElementById(name).value = effort[row][col];
    }
  }
  document.getElementById('popup').style.display = 'flex';
}

function closePopup() {
  for (var row = 0; row < 3; row++){
    for (var col = 0; col < 12; col++){
      var name = "textInput-" + row + "-" + col
      effort[row][col] = document.getElementById(name).value;
    }
  }
  document.getElementById('popup').style.display = 'none';
  console.log(effort);
  measureWords();
  generateLayout();
}

function getEffort(row, column){
  if (effort[row]){
    if (effort[row][column]){
      return effort[row][column];
    }
  }
  return 0;
}

var skip_toggle = false;
function toggle() {
  skip_toggle = !skip_toggle
  generatePlots();
}

function showTooltip(evt, text) {
  let tooltip = document.getElementById("tooltip");
  tooltip.innerHTML = text;
  tooltip.style.display = "block";
  tooltip.style.left = evt.pageX + 10 + 'px';
  tooltip.style.top = evt.pageY + 10 + 'px';
}

function hideTooltip() {
  var tooltip = document.getElementById("tooltip");
  tooltip.style.display = "none";
}

function importLayout(layout) {
  // 01234567890123456789012345678901
  // wlrdzqgubj-shnt,.aeoi'fmvc/;pxky
  for (let i = 0; i < 11; i++) {
    rcdata[i + 1][0] = layout.charAt(i);
  }
  for (let i = 11; i < 22; i++) {
    rcdata[i + 2][0] = layout.charAt(i);
  }
  for (let i = 22; i < 32; i++) {
    rcdata[i + 3][0] = layout.charAt(i);
  }
  if (layout.length >= 33) {
    rcdata[36][0] = layout.charAt(32);
  }
  // console.log(rcdata);
}

function exportLayout(){
  var str = "";
  for (let i = 0; i < 11; i++) {
    str += rcdata[i + 1][0];
  }
  for (let i = 11; i < 22; i++) {
    str += rcdata[i + 2][0];
  }
  for (let i = 22; i < 32; i++) {
    str += rcdata[i + 3][0]
  }
  if (rcdata[36][0].length == 1) {
    str += rcdata[36][0];
  }
  return str
}

function colToX(col) {
  dx = 55;
  if (col > 5) {
    dx = dx + 40;
  }
  return dx + col * (w + gap)
}

function rowToY(row) {
  return 10 + row * (w + gap)
}

function getCol(letter) {
  for (let i = 0; i < rcdata.length; i++) {
    if (rcdata[i][0] === letter) {
      return rcdata[i][2];
    }
  }
  return -1;
}

function getRow(letter) {
  for (let i = 0; i < rcdata.length; i++) {
    if (rcdata[i][0] === letter) {
      return rcdata[i][1];
    }
  }
  return -1;
}

function getFinger(col, row) {
  if (row > 2) {
    if (col <= 4) {
      return 5
    } else {
      return 6
    }
  } else {
    return finger[col];
  }
}

function dist(x1, y1, x2, y2) {
  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2))
}

var xydata = []

function generateCoords() {
  for (let i = 0; i < rcdata.length; i++) {
    xydata[i] = [rcdata[i][0], rowToY(rcdata[i][1]), colToX(rcdata[i][2]), rcdata[i][3]];
  }
}

function generateLayout() {
  svg.selectAll("*").remove();
  // console.log("drawing layout from xydata");
  svg.append("rect").attr("x", 45).attr("y", 0).attr("width", 530).attr("height", 170)
    .attr("stroke", "#777777").attr("fill", "#1b1c1f").attr("fill-opactiy", "0.0").attr("rx", 8).attr("ry", 8)
  for (let i = 0; i < xydata.length; i++) {
    letter = xydata[i][0];
    x = xydata[i][2];
    y = xydata[i][1];
    per = xydata[i][3];
    red = Math.floor(127 * per / max) + 128
    if (red < 16) {
      red = 16;
    }
    hex_red = red.toString(16);
    hex_bg = green.toString(16);

    fontsize = 16;
    if (letter.length > 1) {
      fontsize = 10;
    }

    svg.append("rect").attr("x", x).attr("y", y)
      .attr("width", w).attr("height", w).attr("rx", 4).attr("ry", 4)
      .attr("fill", "#" + hex_red + hex_bg + hex_bg).attr("stroke", "black")
      .attr("stroke-width", "1").attr("class", "draggable");
    svg.append("text").attr("x", x + 15).attr("y", y + 19)
      .attr("font-size", fontsize).attr("font-family", "Sans,Arial")
      .attr("text-anchor", "middle").attr("class", "draggable legend").text(letter);
  }
  // effort text
  svg.append("text").attr("x", 600).attr("y", 165).attr("font-size", 16).attr("font-family", "Sans,Arial").attr("fill", "#dfe2eb").attr("text-anchor", "left").text("Effort "+(577*m_effort/m_input_length).toFixed(2))
  // edit button
  svg.append("rect").attr("x", 720).attr("y", 147).attr("width", 40).attr("height", 25).attr("rx",0).attr("ry",0)
  .attr("fill","#777777").attr("stroke","black").attr("stroke-width","1").attr("onclick", "openPopup()")
  .attr("onmouseover", "showTooltip(evt,'Edit effort values for each key')").attr("onmouseout", "hideTooltip()")

  svg.append("text").attr("x", 740).attr("y", 164).attr("font-size", 16).attr("font-family", "Sans,Arial")
  .attr("fill", "#111111").attr("text-anchor", "middle").attr("pointer-events","none").text("Edit")

}

var m_column_usage = {};
var m_finger_usage = {};
var m_finger_distance = {};
var m_same_finger = {};
var m_skip_bigram = {};
var m_skip_bigram2 = {};
var m_pinky_scissors = {};
var m_lat_stretch = {};
var m_letter_freq = {};
var m_row_usage = {};
var m_trigram_count = {};
var m_input_length = 0;
var m_effort = 0;
var m_simple_effort = {};
var finger_pos = [[0, 0], [1, 1], [1, 2], [1, 3], [1, 4], [3, 4], [3, 7], [1, 7], [1, 8], [1, 9], [1, 10]];

var word_effort = {}
var samehandstrings = {};
function measureDictionary() {
  var total=0, word, char1, char2, col1, row1, col2, row2, hand1, hand2, samehand
  for(var wordi in dictionary) {
    total = 0.0;
    word = dictionary[wordi];
    // console.log(word);
    char1 = word.charAt(0);
    samehand = `${char1}`;
    // console.log(`word = ${word}`)
    for (let i = 1; i < word.length; i++) {
      char1 = word.charAt(i-1);
      char2 = word.charAt(i);
      col1 = getCol(char1);
      row1 = getRow(char1);
      col2 = getCol(char2);
      row2 = getRow(char2);
      // console.log(`  ${char1}${char2}  ${row1},${col1} => ${row2},${col2}`)
      if (bigram_effort[col1]) {
        if (bigram_effort[col1][row1]) {
          if (bigram_effort[col1][row1][col2]) {
            if (bigram_effort[col1][row1][col2][row2]) {
              var e = bigram_effort[col1][row1][col2][row2]
              // console.log(`    effort from ${row1},${col1} to ${row2},${col2} is ${e}`)
              total += e;
            }
          }
        }
      }
    }
    char1 = word.charAt(word.length-1);
    char2 = "_"
    col1 = getCol(char1);
    row1 = getRow(char1);
    col2 = 6;
    row2 = 3;
    // console.log(`  ${char1}${char2}  ${row1},${col1} => ${row2},${col2}`)
    if (bigram_effort[col1]) {
      if (bigram_effort[col1][row1]) {
        if (bigram_effort[col1][row1][col2]) {
          if (bigram_effort[col1][row1][col2][row2]) {
            var e = bigram_effort[col1][row1][col2][row2]
            // console.log(`    effort from ${row1},${col1} to ${row2},${col2} is ${e}`)
            total += e;
          }
        }
      }
    }

    for (let i = 2; i < word.length; i++) {
      char1 = word.charAt(i-2);
      char2 = word.charAt(i);
      col1 = getCol(char1);
      row1 = getRow(char1);
      col2 = getCol(char2);
      row2 = getRow(char2);
      // console.log(`  ${char1}${char2}  ${row1},${col1} => ${row2},${col2}`)
      if (bigram_effort[col1]) {
        if (bigram_effort[col1][row1]) {
          if (bigram_effort[col1][row1][col2]) {
            if (bigram_effort[col1][row1][col2][row2]) {
              var e = bigram_effort[col1][row1][col2][row2]
              // console.log(`    effort from ${row1},${col1} to ${row2},${col2} is ${e}`)
              total += 0.2 * e;
            }
          }
        }
      }
    }
    char1 = word.charAt(word.length-2);
    char2 = "_"
    col1 = getCol(char1);
    row1 = getRow(char1);
    col2 = 6;
    row2 = 3;
    // console.log(`  ${char1}${char2}  ${row1},${col1} => ${row2},${col2}`)
    if (bigram_effort[col1]) {
      if (bigram_effort[col1][row1]) {
        if (bigram_effort[col1][row1][col2]) {
          if (bigram_effort[col1][row1][col2][row2]) {
            var e = bigram_effort[col1][row1][col2][row2]
            // console.log(`    effort from ${row1},${col1} to ${row2},${col2} is ${e}`)
            total += 0.2 * e;
          }
        }
      }
    }

    word_effort[word] = total/word.length;
  }
}

function measureWords() {
  m_column_usage = {};
  m_finger_usage = {};
  m_finger_distance = {};
  m_skip_bigram = {};
  m_skip_bigram2 = {};
  m_pinky_scissors = {};
  m_same_finger = {};
  m_lat_stretch = {};
  m_letter_freq = {};
  m_row_usage = {};
  m_trigram_count = {};
  m_finger_pairs = {};
  samehandstrings = {};
  m_input_length = 0;
  m_effort = 0;
  var char = "";
  var prevchar = "";
  var prevfinger = -1;
  var ppchar = "";
  var ppfinger = -1;
  var bigram, trigram, cat, skip;
  var prevcol = -1;
  var prevrow = -1;
  var col,row,hand,prevhand;
  var m_effort_per_letter = {};
  var m_effort_per_word = {};
  for (var word in words) {
    finger_pos = [[0, 0], [1, 1], [1, 2], [1, 3], [1, 4], [3, 4], [3, 7], [1, 7], [1, 8], [1, 9], [1, 10]];
    // console.log(word);
    var count = words[word];
    m_input_length += count * (word.length + 1);
    char = word.charAt(0);
    samehand = char
    for (let i = 0; i < word.length; i++) {
      char = word.charAt(i);
      // freq //
      if (!m_letter_freq[char]) {
        m_letter_freq[char] = 0;
      }
      m_letter_freq[char] += count;
      // finger usage //
      col = getCol(char);
      if (col <= 5){
        hand = "L"
      } else {
        hand = "R"
      }
      if (col < 0) { break; } // this is the part that just skips numbers and other characters
      if (!m_column_usage[col]) {
        m_column_usage[col] = 0;
      }
      m_column_usage[col] += count;
      // finger usage //
      row = getRow(char);
      // effort
      if (!m_effort_per_letter[char]){
        m_effort_per_letter[char] = 0
      }
      m_effort_per_letter[char] += count * getEffort(row,col)
      if (!m_effort_per_word[word]){
        m_effort_per_word[word] = 0
      }
      m_effort_per_word[word] += count * getEffort(row,col)

      m_effort += count * getEffort(row, col);


      var finger = getFinger(col, row);
      if (!m_finger_usage[finger]) {
        m_finger_usage[finger] = 0;
      }
      m_finger_usage[finger] += count;
      // finger travel distance
      if (row < 0) { break; }
      //dist(x1,y1,x2,y2){
      d = dist(col, row, finger_pos[finger][1], finger_pos[finger][0]);

      if (!m_finger_distance[finger]) {
        m_finger_distance[finger] = 0;
      }
      m_finger_distance[finger] += d * count;

      if (!m_simple_effort[word]) {
        m_simple_effort[word] = 0
      }
      m_simple_effort[word] += d


      finger_pos[finger] = [row, col];

      // finger row //
      if (!m_row_usage[row]) {
        m_row_usage[row] = 0;
      }
      m_row_usage[row] += count;

      // bigram stuff
      if (i > 0) {
        bigram = prevchar + char;
        if (finger == prevfinger && prevchar != char) {
          if (!m_same_finger[bigram]) {
            m_same_finger[bigram] = 0;
          }
          m_same_finger[bigram] += count;
        }
        if ((prevcol == 3 && col == 5) || (prevcol == 8 && col == 6) || (prevcol == 5 && col == 3) || (prevcol == 6 && col == 8)) {
          if (!m_lat_stretch[bigram]) {
            m_lat_stretch[bigram] = 0;
          }
          m_lat_stretch[bigram] += count;
        }
        // pinky/ring scissors
        if (Math.abs(col-prevcol) == 1 && Math.abs(row-prevrow) >= 1 && (finger == 1 ||finger == 10||prevfinger==1||prevfinger==10)) {
          if (!m_pinky_scissors[bigram]) {
            m_pinky_scissors[bigram] = 0;
          }
          m_pinky_scissors[bigram] += count;
        }
        // same hand strings
        if (prevhand == hand) {
          samehand = samehand + char;
        } else {
          if (samehand.length >= 4) {
            if (!samehandstrings[samehand]) {
              samehandstrings[samehand] = 0;
            }
            samehandstrings[samehand] += count;
          }
          samehand = char;
        }
        // finger pairs
        if (!m_finger_pairs[prevfinger]) {
          m_finger_pairs[prevfinger] = {};
        }
        if (!m_finger_pairs[prevfinger][finger]) {
          m_finger_pairs[prevfinger][finger] = 0;
        }
        if (char != prevchar){
          m_finger_pairs[prevfinger][finger] += count;
        }
      }
      // trigram stuff
      if (i > 1) {
        skip = ppchar + "_" + char;
        trigram = ppchar + prevchar + char;
        if (finger == ppfinger && ppchar != char) {
          if (!m_skip_bigram[skip]) {
            m_skip_bigram[skip] = 0;
          }
          m_skip_bigram[skip] += count;

          if (Math.abs(getRow(ppchar)-row) >= 2) {
            if (!m_skip_bigram2[skip]) {
              m_skip_bigram2[skip] = 0
            }
            m_skip_bigram2[skip] += count;
          }
        }
        cat = "other";
        if (ppfinger <= 4 && prevfinger <= 4 && finger <= 4) { // left hand
          if (ppfinger < prevfinger && prevfinger < finger) {
            cat = "roll in"
          } else if (ppfinger > prevfinger && prevfinger > finger) {
            cat = "roll out"
          } else if ((ppfinger < prevfinger && finger < prevfinger) || (ppfinger > prevfinger && finger > prevfinger)) {
            cat = "redirect"
            if (ppfinger == 4 || prevfinger == 4 || finger == 4) {
            } else {
              cat = "bad redirect"
            }
          }
        }
        if (ppfinger >= 7 && prevfinger >= 7 && finger >= 7) { // right hand
          if (ppfinger > prevfinger && prevfinger > finger) {
            cat = "roll in"
          } else if (ppfinger < prevfinger && prevfinger < finger) {
            cat = "roll out"
          } else if ((ppfinger > prevfinger && finger > prevfinger) || (ppfinger < prevfinger && finger < prevfinger)) {
            cat = "redirect"
            if (ppfinger == 7 || prevfinger == 7 || finger == 7) {
            } else {
              cat = "bad redirect"
            }
          }
        }
        if ((ppfinger <= 4 && prevfinger >= 7 && finger <= 4) || (ppfinger >= 7 && prevfinger <= 4 && finger >= 7)) {
          cat = "alt"
          if (ppfinger == finger && ppchar != char) {
            cat = "alt sfs"
          }
        } else if (ppfinger <= 5 && prevfinger <= 5 && finger >= 6 && ppfinger < prevfinger) { // LLR
          cat = "bigram roll in"
        }
        else if (ppfinger >= 6 && prevfinger >= 6 && finger <= 5 && ppfinger > prevfinger) { // RRL
          cat = "bigram roll in"
        }
        else if (ppfinger <= 5 && prevfinger <= 5 && finger >= 6 && ppfinger > prevfinger) { // LLR
          cat = "bigram roll out"
        }
        else if (ppfinger >= 6 && prevfinger >= 6 && finger <= 5 && ppfinger < prevfinger) { // RRL
          cat = "bigram roll out"
        }
        else if (ppfinger <= 5 && prevfinger >= 6 && finger >= 6 && prevfinger > finger) { // LRR
          cat = "bigram roll in"
        }
        else if (ppfinger >= 6 && prevfinger <= 5 && finger <= 5 && prevfinger < finger) { // RLL
          cat = "bigram roll in"
        }
        else if (ppfinger <= 5 && prevfinger >= 6 && finger >= 6 && prevfinger < finger) { // LRR
          cat = "bigram roll out"
        }
        else if (ppfinger >= 6 && prevfinger <= 5 && finger <= 5 && prevfinger > finger) { // RLL
          cat = "bigram roll out";
        }
        if (!m_trigram_count[cat]) {
          m_trigram_count[cat] = 0;
        }
        m_trigram_count[cat] += count;
      }
      prevcol = col;
      prevrow = row;
      prevhand = hand;
      ppchar = prevchar;
      ppfinger = prevfinger;
      prevchar = char;
      prevfinger = finger;
    }
    if (samehand.length >= 4){
      if (!samehandstrings[samehand]) {
        samehandstrings[samehand] = 0;
      }
      samehandstrings[samehand] += count;
    }
  }
  // for(var www in m_simple_effort){
  //   console.log(`${www} ${m_simple_effort[www]}`)
  // }
  var sum = 0;
  for (var letter in m_letter_freq) {
    sum += m_letter_freq[letter]
  }
  // console.log("putting freq into rcdata");
  for (var letter in m_letter_freq) {
    // console.log("letter "+letter)
    for (let i = 0; i < rcdata.length; i++) {
      if (rcdata[i][0] == letter) {
        rcdata[i][3] = 100 * m_letter_freq[letter] / sum
      }
      if (xydata[i][0] == letter) {
        xydata[i][3] = 100 * m_letter_freq[letter] / sum
      }
    }
  }
}

function generatePlots() {
  stats.selectAll("*").remove();
  ///////////////////////////////////////  C O L U M N   U S A G E  ////////////////////////////////////////////
  var x = 500;
  var y = 0;
  stats.append("text").attr("x", x + 40).attr("y", 16).attr("font-size", 16).attr("font-family", "Sans,Arial").attr("fill", "#dfe2eb").attr("text-anchor", "left").text("Column Usage")
  var sum = 0;
  for (var col in m_column_usage) {
    sum += m_column_usage[col];
  }
  for (var col in m_column_usage) {
    var height = 300 * m_column_usage[col] / sum;
    var tip = parseFloat(100 * m_column_usage[col] / sum).toFixed(2);
    var red = Math.floor(275 * m_column_usage[col] / sum) + 128
    var green = 128;
    if (red < 16) { red = 16; }
    if (red > 255) { red = 255; }
    var hex_red = red.toString(16);
    var hex_bg = green.toString(16);

    stats.append("rect").attr("x", x + col * 20).attr("y", 100 - height).attr("width", 15).attr("height", height)
      .attr("fill", "#" + hex_red + hex_bg + hex_bg).attr("stroke", "#453033").attr("stroke-width", 1)
      .attr("onmouseover", "showTooltip(evt,'" + tip + "%')").attr("onmouseout", "hideTooltip()")
    stats.append("text").attr("x", x + col * 20 + 7).attr("y", 111).attr("fill", "#dfe2eb").attr("font-size", 10).attr("font-family", "Sans,Arial").attr("text-anchor", "middle").text(col)
    //<rect x="#{x+column*20}" y="#{y+100-height}" width="15" height="#{height}" fill="##{ab}7787" stroke="#453033" stroke-width="1" onmousemove="showTooltip(evt,'#{(100*value/sum.to_f).round(2)}%')" onmouseout="hideTooltip()" />\n"
  }

  ///////////////////////////////////////  R O W   U S A G E  ////////////////////////////////////////////
  var x = 770;
  var y = 0;
  stats.append("text").attr("x", x + 40).attr("y", 16).attr("font-size", 16).attr("font-family", "Sans,Arial").attr("fill", "#dfe2eb").attr("text-anchor", "left").text("Row Usage")
  var sum = 0;
  for (var row in m_row_usage) {
    sum += m_row_usage[row];
  }
  for (var row in m_row_usage) {
    var height = 200 * m_row_usage[row] / sum;
    var tip = parseFloat(100 * m_row_usage[row] / sum).toFixed(2);
    var red = Math.floor(190 * m_row_usage[row] / sum) + 128
    var green = 128;
    if (red < 16) { red = 16; }
    if (red > 255) { red = 255; }
    var hex_red = red.toString(16);
    var hex_bg = green.toString(16);

    stats.append("rect").attr("x", x + 19).attr("y", y + 40 + row * 20).attr("width", height).attr("height", 14)
      .attr("fill", "#" + hex_red + hex_bg + hex_bg).attr("stroke", "#453033").attr("stroke-width", 1)
      .attr("onmouseover", "showTooltip(evt,'" + tip + "%')").attr("onmouseout", "hideTooltip()")
    stats.append("text").attr("x", x + 9).attr("y", y + 51 + row * 20).attr("fill", "#dfe2eb").attr("font-size", 10).attr("font-family", "Sans,Arial").attr("text-anchor", "middle").text(parseInt(row) + 1)
    //<rect x="#{x+column*20}" y="#{y+100-height}" width="15" height="#{height}" fill="##{ab}7787" stroke="#453033" stroke-width="1" onmousemove="showTooltip(evt,'#{(100*value/sum.to_f).round(2)}%')" onmouseout="hideTooltip()" />\n"
  }
  ///////////////////////////////////////   F I N G E R   U S A G E   //////////////////////////////////////
  var x = 0;
  var y = 0;
  stats.append("text").attr("x", x + 40).attr("y", 16).attr("font-size", 16).attr("font-family", "Sans,Arial").attr("fill", "#dfe2eb").attr("text-anchor", "left").text("Finger Usage")
  var sum = 0;
  var left = 0;
  var right = 0;
  for (var finger in m_finger_usage) {
    sum += m_finger_usage[finger];
    if (finger <= 4) {
      left += m_finger_usage[finger];
    }
    if (finger >= 7) {
      right += m_finger_usage[finger];
    }
  }
  for (var finger in m_finger_usage) {
    var height = 300 * m_finger_usage[finger] / sum;
    var tip = parseFloat(100 * m_finger_usage[finger] / sum).toFixed(2);
    var red = Math.floor(275 * m_finger_usage[finger] / sum) + 128
    var green = 128;
    if (red < 16) { red = 16; }
    if (red > 255) { red = 255; }
    var hex_red = red.toString(16);
    var hex_bg = green.toString(16);
    stats.append("rect").attr("x", x + finger * 20).attr("y", 100 - height).attr("width", 15).attr("height", height)
      .attr("fill", "#" + hex_red + hex_bg + hex_bg).attr("stroke", "#453033").attr("stroke-width", 1)
      .attr("onmouseover", "showTooltip(evt,'" + tip + "%')").attr("onmouseout", "hideTooltip()")
    stats.append("text").attr("x", x + finger * 20 + 7).attr("y", 111).attr("fill", "#dfe2eb").attr("font-size", 10)
      .attr("font-family", "Sans,Arial").attr("text-anchor", "middle").text(finger)
  }
  stats.append("text").attr("x", x + 57).attr("y", 124).attr("fill", "#dfe2eb").attr("font-size", 11).attr("font-family", "Sans,Arial").attr("text-anchor", "middle").text(parseFloat(100 * left / sum).toFixed(2) + "%");
  stats.append("text").attr("x", x + 177).attr("y", 124).attr("fill", "#dfe2eb").attr("font-size", 11).attr("font-family", "Sans,Arial").attr("text-anchor", "middle").text(parseFloat(100 * right / sum).toFixed(2) + "%");
  ///////////////////////////////////////   F I N G E R   D I S T A N C E   //////////////////////////////////
  var x = 250;
  var y = 0;
  var max = 201609;//from qwerty
  sum = 0
  left = 0;
  right = 0;
  for (var finger in m_finger_distance) {
    sum += m_finger_distance[finger];
    if (finger <= 4) {
      left += m_finger_distance[finger];
    }
    if (finger >= 7) {
      right += m_finger_distance[finger];
    }
  }

  stats.append("text").attr("x", x + 40).attr("y", 16).attr("font-size", 16).attr("font-family", "Sans,Arial").attr("fill", "#dfe2eb").attr("text-anchor", "left").text("Finger Distance")
  for (var finger in m_finger_distance) {
    if (m_finger_distance[finger] > 0) {
    var height = 75 * m_finger_distance[finger] / max;
    var tip = parseFloat(100 * m_finger_distance[finger] / max).toFixed(2);
    var red = Math.floor(128 * m_finger_distance[finger] / max) + 128
    var green = 128;
    if (red < 16) { red = 16; }
    if (red > 255) { red = 255; }
    var hex_red = red.toString(16);
    var hex_bg = green.toString(16);
    stats.append("rect").attr("x", x + finger * 20).attr("y", 100 - height).attr("width", 15).attr("height", height)
      .attr("fill", "#" + hex_red + hex_bg + hex_bg).attr("stroke", "#453033").attr("stroke-width", 1)
      .attr("onmouseover", "showTooltip(evt,'" + tip + "')").attr("onmouseout", "hideTooltip()")
    stats.append("text").attr("x", x + finger * 20 + 7).attr("y", 111).attr("fill", "#dfe2eb").attr("font-size", 10).attr("font-family", "Sans,Arial").attr("text-anchor", "middle").text(finger)
    //<rect x="#{x+column*20}" y="#{y+100-height}" width="15" height="#{height}" fill="##{ab}7787" stroke="#453033" stroke-width="1" onmousemove="showTooltip(evt,'#{(100*value/sum.to_f).round(2)}%')" onmouseout="hideTooltip()" />\n"
    }
  }
  stats.append("text").attr("x", x + 57).attr("y", 124).attr("fill", "#dfe2eb").attr("font-size", 11).attr("font-family", "Sans,Arial").attr("text-anchor", "middle").text(parseFloat(100 * left / sum).toFixed(2) + "%");
  stats.append("text").attr("x", x + 177).attr("y", 124).attr("fill", "#dfe2eb").attr("font-size", 11).attr("font-family", "Sans,Arial").attr("text-anchor", "middle").text(parseFloat(100 * right / sum).toFixed(2) + "%");
  ///////////////////////////////////   S A M E   F I N G E R   B I G R A M S    ///////////////////////////////
  var x = 0;
  var y = 180;
  sum = 0;
  var keyValueArray = Object.entries(m_same_finger);
  keyValueArray.sort((a, b) => b[1] - a[1]);
  m_same_finger = Object.fromEntries(keyValueArray);

  for (var bigram in m_same_finger) {
    sum += m_same_finger[bigram] / m_input_length;
  }
  stats.append("text").attr("x", x + 40).attr("y", y - 16).attr("font-size", 16).attr("font-family", "Sans,Arial").attr("fill", "#dfe2eb").attr("text-anchor", "left").text("Same Finger Bigrams " + parseFloat(100 * sum).toFixed(2) + "%")
  // stats.append("text").attr("x",x+40).attr("y",y+200).attr("font-size",16).attr("font-family","Sans,Arial").attr("fill","#dfe2eb").attr("text-anchor","left").text("Input Length "+m_input_length);
  var i = 0
  for (var bigram in m_same_finger) {
    var width = 18000 * m_same_finger[bigram] / m_input_length;
    if (width > 200) { width = 200; }
    stats.append("rect").attr("x", x + 40).attr("y", y + i * 15).attr("width", width).attr("height", 10)
      .attr("fill", "#7777bb").attr("stroke", "#9898d6").attr("stroke-width", 1)
    stats.append("text").attr("x", x + 20).attr("y", y + i * 15 + 8).attr("fill", "#dfe2eb").attr("font-size", 10).attr("font-family", "Sans,Arial").attr("text-anchor", "right").text(bigram);
    stats.append("text").attr("x", x + 200).attr("y", y + i * 15 + 8).attr("fill", "#dfe2eb").attr("font-size", 10).attr("font-family", "Sans,Arial").attr("text-anchor", "left").text(parseFloat("" + (100 * m_same_finger[bigram] / m_input_length)).toFixed(2) + "%");
    //<rect x="#{x+column*20}" y="#{y+100-height}" width="15" height="#{height}" fill="##{ab}7787" stroke="#453033" stroke-width="1" onmousemove="showTooltip(evt,'#{(100*value/sum.to_f).round(2)}%')" onmouseout="hideTooltip()" />\n"
    i += 1;
    if (i > 10) { break; }
  }
  ///////////////////////////////////   S K I P   F I N G E R   B I G R A M S    ///////////////////////////////
  var x = 250;
  var y = 180;
  sum = 0;
  var tmp;
  if (skip_toggle) {
    var keyValueArray = Object.entries(m_skip_bigram);
    keyValueArray.sort((a, b) => b[1] - a[1]);
    tmp = Object.fromEntries(keyValueArray);
  } else {
    var keyValueArray = Object.entries(m_skip_bigram2);
    keyValueArray.sort((a, b) => b[1] - a[1]);
    tmp = Object.fromEntries(keyValueArray);
  }
  for (var bigram in tmp) {
    sum += tmp[bigram] / m_input_length;
  }
  stats.append("text").attr("x", x + 40).attr("y", y - 16).attr("font-size", 16).attr("font-family", "Sans,Arial").attr("fill", "#dfe2eb").attr("text-anchor", "left").text("Skip Bigrams " + parseFloat(100 * sum).toFixed(2) + "%")
  stats.append("rect").attr("x", x + 195).attr("y", y - 32).attr("width", 20).attr("height", 20)
  .attr("fill", "#777777").attr("stroke", "#989898").attr("stroke-width", 1).attr("onmouseover","showTooltip(evt,'Toggle between showing all skip bigrams and only those with a 2u step between 1 and 3')").attr("onmouseout","hideTooltip()").attr("onclick","toggle()")
  var i = 0;
  for (var bigram in tmp) {
    var height = 36000 * tmp[bigram] / m_input_length;
    if (height > 200) { height = 200; }
    stats.append("rect").attr("x", x + 40).attr("y", y + i * 15).attr("width", height).attr("height", 10)
      .attr("fill", "#7777bb").attr("stroke", "#9898d6").attr("stroke-width", 1)
    stats.append("text").attr("x", x + 17).attr("y", y + i * 15 + 8).attr("fill", "#dfe2eb").attr("font-size", 10).attr("font-family", "Sans,Arial").attr("text-anchor", "right").text(bigram);
    stats.append("text").attr("x", x + 200).attr("y", y + i * 15 + 8).attr("fill", "#dfe2eb").attr("font-size", 10).attr("font-family", "Sans,Arial").attr("text-anchor", "left").text(parseFloat("" + (100 * tmp[bigram] / m_input_length)).toFixed(2) + "%");
    //<rect x="#{x+column*20}" y="#{y+100-height}" width="15" height="#{height}" fill="##{ab}7787" stroke="#453033" stroke-width="1" onmousemove="showTooltip(evt,'#{(100*value/sum.to_f).round(2)}%')" onmouseout="hideTooltip()" />\n"
    i += 1;
    if (i > 10) { break; }
  }
  ////////////////////////////   L A T E R A L   S T R E T C H   B I G R A M S   ///////////////////////////////
  var x = 500;
  var y = 180;
  sum = 0;
  var keyValueArray = Object.entries(m_lat_stretch);
  keyValueArray.sort((a, b) => b[1] - a[1]);
  m_lat_stretch = Object.fromEntries(keyValueArray);
  for (var bigram in m_lat_stretch) {
    sum += m_lat_stretch[bigram] / m_input_length;
  }
  stats.append("text").attr("x", x + 40).attr("y", y - 16).attr("font-size", 16).attr("font-family", "Sans,Arial").attr("fill", "#dfe2eb").attr("text-anchor", "left").text("Lat Stretch Bigrams " + parseFloat(100 * sum).toFixed(2) + "%")
  var i = 0
  for (var bigram in m_lat_stretch) {
    var height = 10000 * m_lat_stretch[bigram] / m_input_length;
    if (height > 200) { height = 200; }
    stats.append("rect").attr("x", x + 40).attr("y", y + i * 15).attr("width", height).attr("height", 10)
      .attr("fill", "#7777bb").attr("stroke", "#9898d6").attr("stroke-width", 1)
    stats.append("text").attr("x", x + 20).attr("y", y + i * 15 + 8).attr("fill", "#dfe2eb").attr("font-size", 10).attr("font-family", "Sans,Arial").attr("text-anchor", "right").text(bigram);
    stats.append("text").attr("x", x + 200).attr("y", y + i * 15 + 8).attr("fill", "#dfe2eb").attr("font-size", 10).attr("font-family", "Sans,Arial").attr("text-anchor", "left").text(parseFloat("" + (100 * m_lat_stretch[bigram] / m_input_length)).toFixed(2) + "%");
    //<rect x="#{x+column*20}" y="#{y+100-height}" width="15" height="#{height}" fill="##{ab}7787" stroke="#453033" stroke-width="1" onmousemove="showTooltip(evt,'#{(100*value/sum.to_f).round(2)}%')" onmouseout="hideTooltip()" />\n"
    i += 1;
    if (i > 10) { break; }
  }
  //////////////////////////// P I N K Y - R I N G   S C I S S O R S  ///////////////////////////////
  var x = 760;
  var y = 180;
  sum = 0;
  var keyValueArray = Object.entries(m_pinky_scissors);
  keyValueArray.sort((a, b) => b[1] - a[1]);
  m_pinky_scissors = Object.fromEntries(keyValueArray);
  for (var bigram in m_pinky_scissors) {
    sum += m_pinky_scissors[bigram] / m_input_length;
  }
  stats.append("text").attr("x", x + 40).attr("y", y - 16).attr("font-size", 16).attr("font-family", "Sans,Arial").attr("fill", "#dfe2eb").attr("text-anchor", "left").text("Pinky/Ring Scissors " + parseFloat(100 * sum).toFixed(2) + "%")
  var i = 0
  for (var bigram in m_pinky_scissors) {
    var height = 36000 * m_pinky_scissors[bigram] / m_input_length;
    if (height > 200) { height = 200; }
    stats.append("rect").attr("x", x + 40).attr("y", y + i * 15).attr("width", height).attr("height", 10)
      .attr("fill", "#7777bb").attr("stroke", "#9898d6").attr("stroke-width", 1)
    stats.append("text").attr("x", x + 20).attr("y", y + i * 15 + 8).attr("fill", "#dfe2eb").attr("font-size", 10).attr("font-family", "Sans,Arial").attr("text-anchor", "right").text(bigram);
    stats.append("text").attr("x", x + 190).attr("y", y + i * 15 + 8).attr("fill", "#dfe2eb").attr("font-size", 10).attr("font-family", "Sans,Arial").attr("text-anchor", "left").text(parseFloat("" + (100 * m_pinky_scissors[bigram] / m_input_length)).toFixed(2) + "%");
    //<rect x="#{x+column*20}" y="#{y+100-height}" width="15" height="#{height}" fill="##{ab}7787" stroke="#453033" stroke-width="1" onmousemove="showTooltip(evt,'#{(100*value/sum.to_f).round(2)}%')" onmouseout="hideTooltip()" />\n"
    i += 1;
    if (i > 10) { break; }
  }
  ///////////////////////////////////  T R I G R A M   S T A T S   ///////////////////////////////
  var x = 760;
  var y = 390;
  sum = 0;
  var keyValueArray = Object.entries(m_trigram_count);
  keyValueArray.sort((a, b) => b[1] - a[1]);
  m_trigram_count = Object.fromEntries(keyValueArray);
  for (var cat in m_trigram_count) {
    sum += m_trigram_count[cat]
  }
  const trigram_desc = {
    "alt":"the hands used to type the trigram are either LRL or RLR",
    "alt sfs":"trigram is typed LRL or RLR but finger1 and finger3 are the same and type a different character",
    "bigram roll in":"two of the characters in the trigram are typed with the same hand and the first is outside the second",
    "bigram roll out":"two of the characters in the trigram are typed with the same hand and the first is inside the second",
    "bad redirect":"a redirect but none of the fingers used are the index finger",
    "redirect":"the three characters of the trigram are typed with the same hand and the direction changes",
    "roll out":"the three characters of the trigram are typed with the same hand and go from the inside to the outside",
    "roll in":"the three characters of the trigram are typed with the same hand and go from the outside to the inside",
    "other":"all other trigrams that don\\'t fit into any of the other categories",
  };
  stats.append("text").attr("x", x + 40).attr("y", y - 16).attr("font-size", 16).attr("font-family", "Sans,Arial").attr("fill", "#dfe2eb").attr("text-anchor", "left").text("Trigram Stats")
  var i = 0
  for (var cat in m_trigram_count) {
    var height = 200 * m_trigram_count[cat] / sum;
    if (height > 200) { height = 200; }
    stats.append("rect").attr("x", x + 88).attr("y", y + i * 15).attr("width", height).attr("height", 10)
      .attr("fill", "#7777bb").attr("stroke", "#9898d6").attr("stroke-width", 1)
      .attr("onmouseover","showTooltip(evt,'"+trigram_desc[cat]+"')").attr("onmouseout","hideTooltip()")
    stats.append("text").attr("x", x + 20).attr("y", y + i * 15 + 8).attr("fill", "#dfe2eb").attr("font-size", 10).attr("font-family", "Sans,Arial").attr("text-anchor", "right").text(cat);
    stats.append("text").attr("x", x + 190).attr("y", y + i * 15 + 8).attr("fill", "#dfe2eb").attr("font-size", 10).attr("font-family", "Sans,Arial").attr("text-anchor", "left").text(parseFloat("" + (100 * m_trigram_count[cat] / sum)).toFixed(2) + "%");
    //<rect x="#{x+column*20}" y="#{y+100-height}" width="15" height="#{height}" fill="##{ab}7787" stroke="#453033" stroke-width="1" onmousemove="showTooltip(evt,'#{(100*value/sum.to_f).round(2)}%')" onmouseout="hideTooltip()" />\n"
    i += 1;
    if (i > 10) { break; }
  }

  ///////////////////////////////////  S A M E   H A N D   S T R I N G S  ///////////////////////////////
  var x = 250;
  var y = 390;
  sum = 0;
  // function compareByLength(a, b) {
  //   return b.length - a.length;
  // }
  // samehandstrings.sort(compareByLength);

  var keyValueArray = Object.entries(samehandstrings);
  keyValueArray.sort((a, b) => b[1]*b[0].length - a[1]*a[0].length);
  samehandstrings = Object.fromEntries(keyValueArray);

  stats.append("text").attr("x", x + 40).attr("y", y - 16).attr("font-size", 16).attr("font-family", "Sans,Arial").attr("fill", "#dfe2eb").attr("text-anchor", "left").text("Same Hand Strings ")
  var i = 0
  for (var word in samehandstrings) {
    var count = samehandstrings[word];
    var width = 0.03 * word.length * count;
    if (width > 100) {width = 100;}
    stats.append("rect").attr("x", x + 80).attr("y", y + i * 15).attr("width", width).attr("height", 10).attr("fill", "#7777bb").attr("stroke", "#9898d6").attr("stroke-width", 1)
    stats.append("text").attr("x", x + 20).attr("y", y + i * 15 + 8).attr("fill", "#dfe2eb").attr("font-size", 10).attr("font-family", "Sans,Arial").attr("text-anchor", "right").text(word);
    stats.append("text").attr("x", x + 145).attr("y", y + i * 15 + 8).attr("fill", "#dfe2eb").attr("font-size", 10).attr("font-family", "Sans,Arial").attr("text-anchor", "left").text(word.length*count);
    i += 1;
    if (i > 10) { break; }
  }
  ///////////////////////////////////  H A R D   W O R D S   ///////////////////////////////
  var x = 420;
  var y = 390;
  sum = 0;
  var keyValueArray = Object.entries(word_effort);
  keyValueArray.sort((a, b) => b[1] - a[1]);
  word_effort = Object.fromEntries(keyValueArray);
  stats.append("text").attr("x", x + 40).attr("y", y - 16).attr("font-size", 16).attr("font-family", "Sans,Arial").attr("fill", "#dfe2eb").attr("text-anchor", "left").text("Hard Words ")
  var i = 0
  for (var word in word_effort) {
    var height = 10*word_effort[word];
    if (word.length > 3){
      stats.append("rect").attr("x", x + 80).attr("y", y + i * 15).attr("width", height).attr("height", 10)
        .attr("fill", "#7777bb").attr("stroke", "#9898d6").attr("stroke-width", 1)
      stats.append("text").attr("x", x + 20).attr("y", y + i * 15 + 8).attr("fill", "#dfe2eb").attr("font-size", 10).attr("font-family", "Sans,Arial").attr("text-anchor", "right").text(word);
      stats.append("text").attr("x", x + 165).attr("y", y + i * 15 + 8).attr("fill", "#dfe2eb").attr("font-size", 10).attr("font-family", "Sans,Arial").attr("text-anchor", "left").text(parseFloat("" + (word_effort[word])).toFixed(2));
      i += 1;
      if (i > 10) { break; }
    }
  }
  ///////////////////////////////////  E A S Y   W O R D S   ///////////////////////////////
  var x = 610;
  var y = 390;
  sum = 0;
  var keyValueArray = Object.entries(word_effort);
  keyValueArray.sort((a, b) => a[1] - b[1]);
  word_effort = Object.fromEntries(keyValueArray);
  stats.append("text").attr("x", x + 40).attr("y", y - 16).attr("font-size", 16).attr("font-family", "Sans,Arial").attr("fill", "#dfe2eb").attr("text-anchor", "left").text("Easy Words ")
  var i = 0
  for (var word in word_effort) {
    var height = 10*word_effort[word];
    if (word.length > 3){
      stats.append("rect").attr("x", x + 80).attr("y", y + i * 15).attr("width", height).attr("height", 10)
        .attr("fill", "#7777bb").attr("stroke", "#9898d6").attr("stroke-width", 1)
      stats.append("text").attr("x", x + 20).attr("y", y + i * 15 + 8).attr("fill", "#dfe2eb").attr("font-size", 10).attr("font-family", "Sans,Arial").attr("text-anchor", "right").text(word);
      stats.append("text").attr("x", x + 125).attr("y", y + i * 15 + 8).attr("fill", "#dfe2eb").attr("font-size", 10).attr("font-family", "Sans,Arial").attr("text-anchor", "left").text(parseFloat("" + (word_effort[word])).toFixed(2));
      i += 1;
      if (i > 10) { break; }
    }
  }


  ///////////////////////////////////  F I N G E R   P A I R S   ///////////////////////////////
  // console.log(m_finger_pairs);
  var x = 10;
  var y = 370;
  var box_x = 26;
  var box_y = 20;
  var per = 0;
  var finger1 = i;
  var finger2 = j;
  var sum = 0;
  stats.append("text").attr("x",0).attr("y",0).attr("font-size",10).attr("font-family","Sans,Arial")
       .attr("fill","#dfe2eb").attr("text-anchor","middle")
       .attr("transform",`translate(${x+2},${y+100}) rotate(-90)`)
       .text("First Finger");
  stats.append("text").attr("x",x+130).attr("y",y).attr("font-size",10).attr("font-family","Sans,Arial")
       .attr("fill","#dfe2eb").attr("text-anchor","middle")
       .text("Second Finger");
  for(var i = 0; i <= 8; i++){
    sum = 0;
    for(var j = 1; j <= 8; j++){
      finger1 = i;
      finger2 = j;
      if (i > 4){finger1 += 2;}
      if (j > 4){finger2 += 2;}
      if (m_finger_pairs[finger1]){
        if (m_finger_pairs[finger1][finger2]){
          sum += m_finger_pairs[finger1][finger2];
        }
      }
    }
    for(var j = 0; j <= 8; j++){
      finger1 = i;
      finger2 = j;
      if (i > 4){finger1 += 2;}
      if (j > 4){finger2 += 2;}
      if (i == 0 && j == 0){

      } else if (i == 0 && j > 0) {
        stats.append("text").attr("x",x+box_x*j+14).attr("y",y+box_y*i+14).attr("font-size",10).attr("font-family","Sans,Arial").attr("fill","#dfe2eb").attr("text-anchor","middle").text(finger2);
      } else if (i > 0 && j == 0) {
        stats.append("text").attr("x",x+box_x*j+14).attr("y",y+box_y*i+14).attr("font-size",10).attr("font-family","Sans,Arial").attr("fill","#dfe2eb").attr("text-anchor","middle").text(finger1);
      } else {
        if (m_finger_pairs[finger1]){
          if (m_finger_pairs[finger1][finger2]){
            if (sum > 0){
              per = parseFloat(100 * m_finger_pairs[finger1][finger2] / sum).toFixed(0);
            } else { per = -1;}
            red = Math.floor(128 + 3 * per);
            if (red > 255) {red = 255;}
            hex_red = red.toString(16);

            stats.append("rect").attr("x",x+box_x*j).attr("y",y+box_y*i).attr("width",box_x).attr("height",box_y).attr("fill","#"+hex_red+hex_bg+hex_bg).attr("stroke","black").attr("stroke-width","0.5");
            stats.append("text").attr("x",x+box_x*j+14).attr("y",y+box_y*i+14).attr("font-size",10).attr("font-family","Sans,Arial").attr("fill","black").attr("text-anchor","middle").text(per+"%");
          }
        }
      }
    }
  }
}


function makeDraggable(svg) {
  svg.addEventListener('mousedown', startDrag, false);
  svg.addEventListener('mousemove', drag, false);
  svg.addEventListener('mouseup', endDrag, false);
  svg.addEventListener('mouseleave', endDrag);

  svg.addEventListener('touchstart', startDrag);
  svg.addEventListener('touchmove', drag);
  svg.addEventListener('touchend', endDrag);
  svg.addEventListener('touchleave', endDrag);
  svg.addEventListener('touchcancel', endDrag);

  function getMousePosition(evt) {
    var CTM = svg.getScreenCTM();
    if (evt.touches) { evt = evt.touches[0]; }
    return {
      x: (evt.clientX - CTM.e) / CTM.a,
      y: (evt.clientY - CTM.f) / CTM.d
    };
  }

  var selectedElement, offset, offset2, sibling;
  var starti, dropi;

  function startDrag(evt) {
    if (evt.target.classList.contains('draggable')) {
      selectedElement = evt.target;
      if (selectedElement.classList.contains('legend')){
        selectedElement = selectedElement.previousElementSibling;
        sibling = evt.target;
      } else {
        sibling = selectedElement.nextElementSibling; // dude this is super useful!
      }
      if (selectedElement) {
        // move to the end so they appear on top while dragging
        svg.insertBefore(selectedElement, svg.lastChild);
        svg.insertBefore(sibling, svg.lastChild);

        x = selectedElement.getAttributeNS(null, "x");
        y = selectedElement.getAttributeNS(null, "y");
        // console.log("pick up at "+x+"  "+y);
        // scan through xydata to find out which key are we closest to
        closestdist = 9999;
        starti = -1;
        for (let i = 0; i < xydata.length; i++) {
          d = dist(x, y, xydata[i][2], xydata[i][1]);
          if (d < closestdist) {
            // console.log("dist = "+d+"  "+xydata[i][0]);
            closestdist = d;
            starti = i;
          }
        }
        // console.log("picked up "+xydata[starti][0]);
        offset = getMousePosition(evt);
        offset2 = getMousePosition(evt);
        offset.x -= parseFloat(selectedElement.getAttributeNS(null, "x"));
        offset.y -= parseFloat(selectedElement.getAttributeNS(null, "y"));
        offset2.x -= parseFloat(sibling.getAttributeNS(null, "x"));
        offset2.y -= parseFloat(sibling.getAttributeNS(null, "y"));
      }

    }
  }

  function drag(evt) {
    if (selectedElement) {
      if (sibling) {
        evt.preventDefault();
        var coord = getMousePosition(evt);
        selectedElement.setAttributeNS(null, "x", coord.x - offset.x);
        selectedElement.setAttributeNS(null, "y", coord.y - offset.y);
        sibling.setAttributeNS(null, "x", coord.x - offset2.x);
        sibling.setAttributeNS(null, "y", coord.y - offset2.y);
      }
    }
  }


  function endDrag(evt) {
    if (selectedElement) {
      x = selectedElement.getAttributeNS(null, "x");
      y = selectedElement.getAttributeNS(null, "y");
      // console.log("drop at "+x+"  "+y);
      selectedElement = false;
      sibling = false;
      // scan through xydata to find out which key are we closest to
      closestdist = 9999;
      for (let i = 0; i < xydata.length; i++) {
        d = dist(x, y, xydata[i][2], xydata[i][1]);
        if (d < closestdist) {
          // console.log("dist = "+d+"  "+xydata[i][0]);
          closestdist = d;
          dropi = i;
        }
      }
      // console.log("dropped on "+xydata[dropi][0]);

      // swap x and y in xydata
      tmp = xydata[starti][0];
      xydata[starti][0] = xydata[dropi][0];
      xydata[dropi][0] = tmp;
      tmp = xydata[starti][3];
      xydata[starti][3] = xydata[dropi][3];
      xydata[dropi][3] = tmp;
      // swap x and y in rcdata
      tmp = rcdata[starti][0];
      rcdata[starti][0] = rcdata[dropi][0];
      rcdata[dropi][0] = tmp;
      tmp = rcdata[starti][3];
      rcdata[starti][3] = rcdata[dropi][3];
      rcdata[dropi][3] = tmp;

      var queryParams = new URLSearchParams(window.location.search);
      queryParams.set("layout", exportLayout());
      history.replaceState(null, null, "?"+queryParams.toString());

      d3.select(svg).selectAll("*").remove();
      measureWords();
      measureDictionary();
      generateLayout();
      generatePlots();
    }
  }
}

function run(layout) {
  importLayout(layout);
  generateCoords();
  measureWords();
  measureDictionary();
  generateLayout();
  generatePlots();
}

// importLayout("wlrdzqgubj-shnt,.aeoi'fmvc/;pxky");
if (url_layout) {
  importLayout(url_layout)
}
generateCoords();
fetchData();
fetchDictionary();
// measureWords();
// measureDictionary();
// generateLayout();
// generatePlots();